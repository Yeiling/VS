<?xml version="1.0"?>
<doc>
    <assembly>
        <name>shuiyintong.Api</name>
    </assembly>
    <members>
        <member name="T:shuiyintong.Api.AutoFacAop.LogAfterInterceptor">
            <summary>
            Aspect AOP定义一个前置拦截器
            </summary>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogAfterInterceptor.After(Autofac.Aspect.AspectContext)">
            <summary>
            后置拦截器拦截器
            </summary>
            <param name="aspectContext"></param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.AutoFacAop.LogArroundInterceptor">
            <summary>
            Aspect AOP定义一个环绕拦截器
            </summary>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogArroundInterceptor.Before(Autofac.Aspect.AspectContext)">
            <summary>
            前置拦截器拦截器
            </summary>
            <param name="aspectContext"></param>
            <returns></returns>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogArroundInterceptor.After(Autofac.Aspect.AspectContext)">
            <summary>
            后置拦截器拦截器
            </summary>
            <param name="aspectContext"></param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.AutoFacAop.LogBeforeInterceptor">
            <summary>
            Aspect AOP定义一个前置拦截器---事务
            </summary>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogBeforeInterceptor.Before(Autofac.Aspect.AspectContext)">
            <summary>
            前置拦截器
            </summary>
            <param name="aspectContext"></param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.AutoFacAop.LogInterceptor">
            <summary>
            AutoFac AOP拦截器 需要实现 IInterceptor接口 Intercept方法
            </summary>
        </member>
        <member name="F:shuiyintong.Api.AutoFacAop.LogInterceptor.nlog">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实现Castle.DynamicProxy(动态代理中的接口IInterceptor)
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:shuiyintong.Api.AutoFacAop.LogInterceptorAttribute">
            <summary>
            AspectCore AOP
            </summary>
        </member>
        <member name="M:shuiyintong.Api.AutoFacAop.LogInterceptorAttribute.Invoke(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate)">
            <summary>
            重写AbstractInterceptorAttribute的Invoke方法
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.BuilderJsonConfig">
            <summary>
            读取配置文件
            </summary>
        </member>
        <member name="M:shuiyintong.Api.BuilderJsonConfig.UseJsonConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            实现
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:shuiyintong.Api.Controllers.BaseController">
            <summary>
            控制器基类
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.BaseController.bankConfig">
            <summary>
            银行配置
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.BaseController.RedisConn">
            <summary>
            Redis链接字符串
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.BaseController.DBConn">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="T:shuiyintong.Api.Controllers.DefaultController">
            <summary>
            测试使用
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.DefaultController.nlog">
            <summary>
            获得日志实例
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.DefaultController.SPDBankConfig">
            <summary>
            浦发银行配合信息
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.DefaultController.Code">
            <summary>
            Http请求返回Code
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Controllers.DefaultController.SingleTransfer(shuiyintong.Entity.SPDBankEntity.SPDBankReq.SingleTransferReq)">
            <summary>
            单笔划拨--日志测试
            </summary>
            <param name="singleTransferReq">请求参数</param>
        </member>
        <member name="M:shuiyintong.Api.Controllers.DefaultController.GetHeaderSign(System.Object,System.String@)">
            <summary>
            获取签名
            </summary>
            <param name="obj">对象参数</param>
            <param name="dataRequest">请求Json字符串</param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.Controllers.SPDBankController">
            <summary>
            浦发银行接口
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Controllers.SPDBankController.AcctDtlInfoServer">
            <summary>
            数据库实现
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.SPDBankController.SPDBank">
            <summary>
            银行类型---浦发银行
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.SPDBankController.SPDBankConfig">
            <summary>
            浦发银行配合信息
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Controllers.SPDBankController.Code">
            <summary>
            Http请求返回Code
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.GetHeaderSign(System.Object,System.String@)">
            <summary>
            获取签名
            </summary>
            <param name="obj">对象参数</param>
            <param name="dataRequest">请求Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.GenerateDoc(shuiyintong.Entity.SPDBankEntity.SPDBankFile.GuaranteeReq)">
            <summary>
            担保函导出Word文档
            </summary>
            <param name="guaranteeReq">参数---输出路径必填</param>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.UpLoadfile(shuiyintong.Entity.SPDBankEntity.SPDBankFile.SPDBankFileUpLoadReq)">
            <summary>
            文件上传
            </summary>
            <param name="upLoadReq">请求参数</param>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.DownLoadfile(shuiyintong.Entity.SPDBankEntity.SPDBankFile.SPDBankFileDownLoadReq)">
            <summary>
            文件下载
            </summary>
            <param name="downLoadReq">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.AcctInfo(shuiyintong.Entity.SPDBankEntity.SPDBankReq.AccountReq)">
            <summary>
            获取账户信息
            </summary>
            <param name="accountRequest">请求参数</param>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.AcctDtlInfoQry(shuiyintong.Entity.SPDBankEntity.SPDBankReq.AcctDtlInfoQryReq)">
            <summary>
            查询账户信息
            </summary>
            <param name="acctInfoReq">请求参数</param>
        </member>
        <member name="M:shuiyintong.Api.Controllers.SPDBankController.SingleTransfer(shuiyintong.Entity.SPDBankEntity.SPDBankReq.SingleTransferReq)">
            <summary>
            单笔划拨
            </summary>
            <param name="singleTransferReq">请求参数</param>
        </member>
        <member name="T:shuiyintong.Api.IocConfig">
            <summary>
            AutoFac IOC扩展
            </summary>
        </member>
        <member name="M:shuiyintong.Api.IocConfig.AutoFacIoc(Autofac.ContainerBuilder)">
            <summary>
            AutoFac 属性注入和AOP注入
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:shuiyintong.Api.Program">
            <summary>
            主程序
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Program.Main(System.String[])">
            <summary>
            入口
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:shuiyintong.Api.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            CreateWebHostBuilder
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:shuiyintong.Api.Startup">
            <summary>
            Startup类
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Startup.Configuration">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:shuiyintong.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:shuiyintong.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            配置信息
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory">NLog</param>
        </member>
        <member name="T:shuiyintong.Api.Validate.ValidateExceptionFilterAttribute">
            <summary>
            WebAPI异常处理过滤---重写
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Validate.ValidateExceptionFilterAttribute.nlog">
            <summary>
            获得日志实例
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Validate.ValidateExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            重写基类的异常处理方法
            </summary>
            <param name="exceptionContext"></param>
        </member>
        <member name="T:shuiyintong.Api.Validate.BaseResultModel">
            <summary>
            结果验证对象
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Validate.BaseResultModel.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Validate.BaseResultModel.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Validate.BaseResultModel.Result">
            <summary>
            错误结果
            </summary>
        </member>
        <member name="P:shuiyintong.Api.Validate.BaseResultModel.ReturnStatus">
            <summary>
            错误状态
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Validate.BaseResultModel.#ctor(System.Nullable{System.Int32},System.String,System.Object,shuiyintong.Api.Validate.ReturnStatus)">
            <summary>
            构造函数
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="result"></param>
            <param name="returnStatus"></param>
        </member>
        <member name="T:shuiyintong.Api.Validate.ReturnStatus">
            <summary>
            状态码
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Validate.ReturnStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Validate.ReturnStatus.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Validate.ReturnStatus.ConfirmIsContinue">
            <summary>
            命令继续
            </summary>
        </member>
        <member name="F:shuiyintong.Api.Validate.ReturnStatus.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:shuiyintong.Api.Validate.ValidateModelAttribute">
            <summary>
            请求参数属性验证(如:必填项，数值范围约定，正则表达式匹配等)---重写
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Validate.ValidateModelAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            重写OnActionExecuting方法，统一定义验证
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:shuiyintong.Api.Validate.ValidateResultAttribute">
            <summary>
            请求返回结果验证---重写
            </summary>
        </member>
        <member name="M:shuiyintong.Api.Validate.ValidateResultAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            请求执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:shuiyintong.Api.Validate.ValidateResultAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            执行结果过滤(包含参数验证失败返回和请求成功返回，定义统一格式返回数据，方便解析)
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
